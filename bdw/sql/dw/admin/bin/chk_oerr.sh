#!/bin/ksh
#============================================================================
# File:		chk_oerr.sh
# Type:		UNIX korn-shell script
# Author:	Tim Gorman (Evergreen Database Technologies, Inc)
# Date:		02jul99
#
# Description:
#
# Exit statuses:
#	0	normal succesful completion
#	1	ORACLE_SID not specified - user error
#	2	ORACLE_SID not valid in ORATAB - user error
#	3*	"admin/bin" directory not found
#	4*	"bdump" directory not found
#	5*	"cdump" directory not found
#	6*	"udump" directory not found
#	7*	"alert.log" file not found
#	8*	error messages detected!
#
#       "*" means that a HIGH-severity message is sent to REMEDY
#       "**" means that a CRITICAL-severity message is sent to REMEDY
#
# Modifications:
#============================================================================
_Pgm=chk_oerr.sh
#
#----------------------------------------------------------------------------
# Verify that the ORACLE_SID has been specified on the UNIX command-line...
#----------------------------------------------------------------------------
if (( $# != 1 ))
then
	exit 1
fi
_OraSid=$1
#
#----------------------------------------------------------------------------
# Verify that the ORACLE_SID is registered in the ORATAB file...
#----------------------------------------------------------------------------
grep ${_OraSid} /var/opt/oracle/oratab > /dev/null 2>&1
if (( $? != 0 ))
then
	exit 2
fi
#
#----------------------------------------------------------------------------
# Set up Oracle environment...
#----------------------------------------------------------------------------
. ~/.profile 2> /dev/null
export PATH=${PATH}:/opt/app/oracle/admin/bin
#
#----------------------------------------------------------------------------
# Set the Oracle environment variables for this database instance...
#----------------------------------------------------------------------------
export ORACLE_SID=${_OraSid}
export ORAENV_ASK=NO
. oraenv
unset ORAENV_ASK
#
#----------------------------------------------------------------------------
# Locate the "admin/bin" directory and the script's log file...
#----------------------------------------------------------------------------
_Bin=/opt/app/oracle/admin/bin
if [ ! -d ${_Bin} ]
then
	notify.sh HIGH ${_OraSid} "${_Pgm}: \"admin/bin\" directory not found"
	exit 3
fi
#
#----------------------------------------------------------------------------
# Locate the script's "log" file;  if it doesn't exist, then initialize
# it.  If it already exists but has grown too large (i.e. over 100 lines),
# then trim it by re-initializing it...
#
# The last line of the "log" file contains "contextual" information for this
# script to use, namely three fields (separated by "~" characters)
# containing:
#
#	LN~HL~TM
#
# where:
#	LN	is the last line number in the "alert.log" last checked
#	HL	is the contents of the first line in the "alert.log" file
#		when last checked
#	TM	is the time this script was last run, in the format of
#		"CCYYMMDDHH24MI" (the same format used by the "touch -am"
#		UNIX command)...
#
#----------------------------------------------------------------------------
_Log=${_Bin}/chk_oerr_state.log
if [ -r ${_Log} ]
then
	_NbrLines=`wc -l ${_Log} | awk '{print $1}'`
	if (( ${_NbrLines} >= 100 ))
	then
		_Line=`tail -1 ${_Log}`
		echo "# file re-initialized on \"`date`\"" > ${_Log}
		echo "# PLEASE DO NOT edit this file" >> ${_Log}
		echo ${_Line} >> ${_Log}
	fi
else
	echo "# file initialized on \"`date`\"" > ${_Log}
	echo "# PLEASE DO NOT edit this file" >> ${_Log}
	echo "0~~9001010000" >> ${_Log}
	chmod 644 ${_Log}
fi
#
#----------------------------------------------------------------------------
# Extract the three field values from the last line of the "log" file...
#----------------------------------------------------------------------------
_LastLineNbr=`tail -1 ${_Log} | awk -F~ '{print $1}'`
_LastHeadLine=`tail -1 ${_Log} | awk -F~ '{print $2}'`
_LastTime=`tail -1 ${_Log} | awk -F~ '{print $3}'`
#
#----------------------------------------------------------------------------
# Locate the "bdump" directory...
#----------------------------------------------------------------------------
_BDump=/opt/app/oracle/admin/${ORACLE_SID}/bdump
if [ ! -d ${_BDump} ]
then
	notify.sh HIGH ${_OraSid} "${_Pgm}: \"bdump\" directory not found"
	exit 4
fi
#
#----------------------------------------------------------------------------
# Locate the "cdump" directory...
#----------------------------------------------------------------------------
_CDump=/opt/app/oracle/admin/${ORACLE_SID}/cdump
if [ ! -d ${_CDump} ]
then
	notify.sh HIGH ${_OraSid} "${_Pgm}: \"cdump\" directory not found"
	exit 5
fi
#
#----------------------------------------------------------------------------
# Locate the "udump" directory...
#----------------------------------------------------------------------------
_UDump=/opt/app/oracle/admin/${ORACLE_SID}/udump
if [ ! -d ${_UDump} ]
then
	notify.sh HIGH ${_OraSid} "${_Pgm}: \"udump\" directory not found"
	exit 6
fi
#
#----------------------------------------------------------------------------
# Locate the "alert.log" file...
#----------------------------------------------------------------------------
_AlertLog=${_BDump}/alert_${ORACLE_SID}.log
if [ ! -r ${_AlertLog} ]
then
	notify.sh HIGH ${_OraSid} "${_Pgm}: \"alert.log\" file not found"
	exit 7
fi
#
#----------------------------------------------------------------------------
# Retrieve new values for the "log" file to be logged after the script
# completes successfully...
#----------------------------------------------------------------------------
_CurrLineNbr=`wc -l ${_AlertLog} | awk '{print $1}'`
_CurrHeadLine=`head -1 ${_AlertLog}`
_CurrTime=`date "+%y%m%d%H%M"`
#
#----------------------------------------------------------------------------
# Find new entries in the "alert.log" file since the last time this script
# was executed.  If the "alert.log" file has changed in any way (i.e. the
# first line is different or the numbers of lines don't make sense), then
# just read the whole thing...
#
# The text from the "alert.log" to be searched will be saved in a temporary
# file...
#----------------------------------------------------------------------------
_TmpFile=/tmp/chk_oerr_$$.tmp
if [[ "${_LastHeadLine}" = "${_CurrHeadLine}" ]]
then
	if (( ${_LastLineNbr} <= ${_CurrLineNbr} && ${_LastLineNbr} > 0 ))
	then
		sed "1,${_LastLineNbr}d" ${_AlertLog} > ${_TmpFile}
	else
		cat ${_AlertLog} > ${_TmpFile}
	fi
else
	cat ${_AlertLog} > ${_TmpFile}
fi
#
#----------------------------------------------------------------------------
# Create a file to be used by the UNIX "find" command to find any files
# modified since a specified time...
#----------------------------------------------------------------------------
_NewerFile=/tmp/chk_oerr_$$.newer
touch -am -t ${_LastTime} ${_NewerFile}
#
#----------------------------------------------------------------------------
# Determine whether there are any ORA-00600 errors (except where the 1st
# parameter is "12235", which is a user error), and ORA-00604 errors
# (usually coming from PL/SQL), any ORA-01578 errors (file/block corruption),
# or any ORA-07nnn errors (usually memory corruption)...
#
# Check the "alert.log" file and any new ".trc" files found in the "bdump"
# or "udump" directories created since the last time this script was
# executed...
#----------------------------------------------------------------------------
_OutFile=/tmp/chk_oerr_${ORACLE_SID}_${_CurrTime}.txt
_HoldFile=/tmp/chk_oerr_$$.hold
for _f in ${_TmpFile} \
	`find ${_BDump} -name "*.trc" -newer ${_NewerFile} -print` \
	`find ${_UDump} -name "*.trc" -newer ${_NewerFile} -print`
do
	grep "ORA-00600" ${_f} | grep -v 12235 > ${_HoldFile}
	grep "ORA-00604" ${_f} >> ${_HoldFile}
	grep "ORA-01578" ${_f} >> ${_HoldFile}
	grep "ORA-07" ${_f} >> ${_HoldFile}
	if [ -s ${_HoldFile} ]
	then
		if [[ "${_f}" = "${_TmpFile}" ]]
		then
			echo "New errors detected in \"${_AlertLog}\":" >> ${_OutFile}
		else
			echo "New errors detected in \"${_f}\":" >> ${_OutFile}
		fi
		echo "===========================================================" >> ${_OutFile}
		cat ${_HoldFile} >> ${_OutFile}
		echo "" >> ${_OutFile}
	fi
done
#
#----------------------------------------------------------------------------
# Also, make note of any new "core" file in the "cdump" directory...
#----------------------------------------------------------------------------
find ${_CDump} -name core -newer ${_NewerFile} -print > ${_HoldFile}
if [ -s ${_HoldFile} ]
then
	echo "New core files in \"${_CDump}\":" >> ${_OutFile}
	echo "===========================================================" >> ${_OutFile}
	cat ${_HoldFile} >> ${_OutFile}
fi
#
#----------------------------------------------------------------------------
# Get rid of temporary files...
#----------------------------------------------------------------------------
rm -f ${_HoldFile}
rm -f ${_TmpFile}
rm -f ${_NewerFile}
#
#----------------------------------------------------------------------------
# Log new starting values to the "log" file for the next time this script
# is executed...
#----------------------------------------------------------------------------
echo "${_CurrLineNbr}~${_CurrHeadLine}~${_CurrTime}" >> ${_Log}
#
#----------------------------------------------------------------------------
# If an output file was created, then notify administrators, otherwise
# exit quietly...
#----------------------------------------------------------------------------
if [ -s ${_OutFile} ]
then
	notify.sh MEDIUM ${_OraSid} "${_Pgm}: new errors - check \"${_OutFile}\""
	exit 8
else
	exit 0
fi
